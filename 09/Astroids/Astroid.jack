class Astroid{
    field int posX, posY, size, health, vX, vY;

    constructor Astroid new(int in_posX, int in_posY, int in_size, int in_health, int in_vX, int in_vY){
        let posX = in_posX;
        let posY = in_posY;
        let size = in_size;
        let health = in_health;
        let vX = in_vX;
        let vY = in_vY;

        return this;

    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        do Screen.setColor(false);
        if( ((posX - size) > 1) & ((posX + size) < 511) & ((posY - size) > 1) & ((posY + size) < 255) ){
            do Screen.drawCircle(posX, posY, size);
        }
        return;
    }

    method boolean refreshRM(){
        let posX = posX + vX;
        let posY = posY + vY;
        if((posX < (0+size)) | (posX > (511-size))){
            return false;
        }
        else{
            if((posY < (0+size)) | (posY > (255-size)) ){
                return false;
            }
            else {
                return true;
            }
        }
    }

    method void refresh(){
        let posX = posX + vX;
        let posY = posY + vY;

        if(posX+size+1 > 512){ let posX = size+1; }
        else{ if(posX-(size+1) < 0){ let posX = 511-(size+1); }}

        if(posY+size+1 > 254){ let posY = size+Constant.BARSIZE()+1; }
        else{ if(posY-(size+1+Constant.BARSIZE()) < 0){ let posY = 255-(size+1); }}

        return;
    }


    method boolean doDmg(int x){
        let health = health - x;
        if( health < 1){
            return true;
        }
        return false;
    }

    method int getPosX(){ return posX; }
    method int getPosY(){ return posY; }
    method int getSize(){ return size; }

}